[
    {
        "id": "80bac308a04077d0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d59784c2f3ea1527",
        "type": "comment",
        "z": "80bac308a04077d0",
        "name": "Send json data to Unity",
        "info": "",
        "x": 160,
        "y": 60,
        "wires": []
    },
    {
        "id": "d6bcc3296518e55a",
        "type": "inject",
        "z": "80bac308a04077d0",
        "name": "Json Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"roboticArm\":{\"picker\":{\"degrees\":5,\"description\":\"Picker joint moves to 45 degrees.\"},\"upperJoint\":{\"degrees\":10,\"description\":\"Upper joint moves to 30 degrees.\"},\"lowerJoint\":{\"degrees\":20,\"description\":\"Lower joint moves to 15 degrees.\"},\"baseJoint\":{\"degrees\":0,\"description\":\"Base joint moves to 60 degrees.\"}},\"servoMotor\":{\"degrees\":30,\"description\":\"Servo motor moves to 30 degrees.\"},\"led\":{\"ledState\":true,\"description\":\"LED should glow, with the state being true for on and false for off.\"},\"priorityList\":[\"upperJoint\",\"picker\",\"lowerJoint\",\"baseJoint\",\"servoMotor\",\"led\"],\"description\":\"The robotic arm performs movements in a specific order: upper joint first, followed by picker, then lower joint, base joint, servo motor, and finally, the LED. LED state is on.\"}",
        "payloadType": "json",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "02e87683216db90e"
            ]
        ]
    },
    {
        "id": "faf76443e2cc6b33",
        "type": "mqtt out",
        "z": "80bac308a04077d0",
        "name": "Publish KukaRobo Simulation Data",
        "topic": "satorixr/digitaltwin/kuka",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b9f2e950e5249e09",
        "x": 640,
        "y": 120,
        "wires": []
    },
    {
        "id": "02e87683216db90e",
        "type": "function",
        "z": "80bac308a04077d0",
        "name": "Extract important data",
        "func": "// Extract the priority list and the data\nlet priorityList = msg.payload.priorityList;\nlet roboticArm = msg.payload.roboticArm;\nlet servoMotor = msg.payload.servoMotor;\nlet led = msg.payload.led;\n\n// Iterate over the priority list and send individual actions one by one\nlet index = 0;  // Track the current action index\n\n// Save the priority list and the current index in context to retain state\ncontext.priorityList = priorityList;\ncontext.index = index;\n\n// Function to send the next action\nfunction sendNextAction() {\n    // Get the current action from the priority list\n    let action = priorityList[context.index];\n    let actionData = {};\n\n    // Based on the action, prepare the data to send\n    switch (action) {\n        case 'upperJoint':\n            actionData = {\n                component: 'Upper Joint',\n                degrees: roboticArm.upperJoint.degrees\n            };\n            break;\n\n        case 'picker':\n            actionData = {\n                component: 'Picker',\n                degrees: roboticArm.picker.degrees\n            };\n            break;\n\n        case 'lowerJoint':\n            actionData = {\n                component: 'Lower Joint',\n                degrees: roboticArm.lowerJoint.degrees\n            };\n            break;\n\n        case 'baseJoint':\n            actionData = {\n                component: 'Base Joint',\n                degrees: roboticArm.baseJoint.degrees\n            };\n            break;\n\n        case 'servoMotor':\n            actionData = {\n                component: 'Servo Motor',\n                degrees: servoMotor.degrees\n            };\n            break;\n\n        case 'led':\n            actionData = {\n                component: 'LED',\n                ledState: led.ledState\n            };\n            break;\n\n        default:\n            break;\n    }\n\n    // Send the current action with the component name\n    node.send({ payload: actionData });\n\n    // Increment the index to move to the next action\n    context.index++;\n\n    // If there are more actions, schedule the next one\n    if (context.index < priorityList.length) {\n        setTimeout(sendNextAction, 1000); // Adjust delay as needed\n    }\n}\n\n// Start sending actions\nsendNextAction();\n\n// End the function node\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": [
            [
                "faf76443e2cc6b33"
            ]
        ]
    },
    {
        "id": "b9f2e950e5249e09",
        "type": "mqtt-broker",
        "name": "HiveMQ Serverless",
        "broker": "",
        "port": "1883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]